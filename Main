import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import pandas_datareader as web
import datetime as dt

from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, LSTM, CuDNNLSTM, BatchNormalization

# Load data
company = 'NAME'

start = dt.datetime(2019,1,1)
end = dt.datetime(2021,8,7)

data = web.DataReader(company, 'yahoo', start, end)  # yahoo finance center

# Prepare data
scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(data['Close'].values.reshape(-1,1)) # reshape to only 1 colum

prediction_days = 60 

x_train = []
y_train = []

for x in range(prediction_daysm len(scaled_data)):
    x_train.append(scaled_data[x-prediction_days:x, 0])  # leave 60 days
    y_train.append(scaled_Data[x,0])
    
x_train, y_Train = np.array(x_train), np.array(y_train)
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))

# Build Model

model = Sequential()

model.add(LSTM(units=50, return_sequences=True, input_shape = (x_train.shape[1], 1))) # or x_train.shape[1:]
model.add(Dropout(0.2))

model.add(LSTM(units=50, return_sequences=True))
model.add(Dropout(0.2))

model.add(LSTM(units=50)
model.add(Dropout(0.2))

model.add(Dense(units=1)) #predict next closing value   #model.add(Dense(32, activation='relu')) \n model.add(Dropout(0.2)) \n model.add(Dense(2, activation='softmax')) if model.add(BatchNormalization()) after dropout

#opt = tf.keras.optimizers.Adam(lr=0.001, decay=1e-6)

model.compile(optimizer = 'adam', loss='mean_squared_error')   # metrics = ['accuracy']
model.fit(x_train, y_train, epochs=25, batch_size=32)  # validation_data = (validation_x, validation_y)

predicted_prices = model.predict(x_test)
predicted_prices = scaler.inverse_transform(predicted_prices)


plt.plot(actual_prices, color='black', label=f'Actual {company} price')
plt.plot(predicted_prices, color='green', label=f'Actual {company} price')
plt.title()
plt.xlabel
plt.ylabel()
plt.legend()
plt.show
